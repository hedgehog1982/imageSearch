 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

var imageSearch = require('node-google-image-search');

var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;
var url = "mongodb://" + process.env.SECRET +"@ds149763.mlab.com:49763/freecodecamp"          ; //url for connection to database

function addDB (search, time){
    MongoClient.connect(url, function (err, db) {
  if (err) {
    console.log('Unable to connect to the mongoDB server. Error:', err);
  } else {
    console.log('Connection established to', url);
    var collection = db.collection('searches');  // seraching a collection in this searches
		    collection.insert({  //insert into our collection (docs)
				term: search
								,when: time
	
				},function(err, documents) { // recieve error or documents
					if (err) throw err;
					
					db.close();  // close or it get grumpy
				})
    //Close connection
  }
});  
}

function readDB (callback){
  
    MongoClient.connect(url, function (err, db) {  
      if (err) {
          //console.log('Unable to connect to the mongoDB server. Error:', err);
      } else {
          //console.log('Connection established to', url);

var collection = db.collection('searches');  // seraching a collection in this docs
            collection.find({
            },{//find all records in our collection (URL)
                term: 1,
                when: 1,
                _id:0  //dont include ids  //because why would you
				}).sort({when:-1}) //sort in reverse order
            .limit(10)  //limit to 10 records     
            .toArray(function(err, documents) { // recieve error or documents
              if (err) {console.log("error is" + err);}
					//console.log(documents);					
					db.close();
            callback (documents);
      }); //end of find
    }  //end of else
  })

  }

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res,next) {
		  res.sendFile(process.cwd() + '/views/index.html');

    })

app.route('/imagesearch')
    .get(function(req, res, next) {
    var currentTime = Date();
  readDB(function(documents){
    res.send(documents);
    
  });
  
    })

    

//////////////////////////////////////////// Respond with searches \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
app.use(function(req, res, next){
  console.log(req.path);
  if ( req.path == '/') return next();  //i dont think this is the correct way of skipping middleware..
  if (req.path == '/favicon.ico') return next(); 
    if (req.path == '/imagesearch') return next(); 
      if (req.path == '/imagesearch/') return next(); 

 
  // break it down into search term and amount of searches
  var searchTerm =(req.originalUrl).split('?').shift().split("/").join("").split("%20").join(" ");  //remove garbage 
   var searches = (req.originalUrl).split("=").pop();
  
  if (isNaN(searches)) {searches = 10;}  //allows a search even if syntax is not correct
   
    // do search (google api?)  and display
var results = imageSearch(searchTerm, callback, 0, searches); 
function callback(results) {
	var filterRes = results.map( function (item){
    var picked = {"url" : item.link, "snippet": item.snippet, "thumbnail": item.image.thumbnailLink, "context": item.image.contextLink};
    return picked;    
  });  
  res.send(filterRes);
}
var currentTime = Date(); 
addDB(searchTerm, currentTime);
  



  
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

